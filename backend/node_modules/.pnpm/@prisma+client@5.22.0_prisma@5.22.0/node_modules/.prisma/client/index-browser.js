
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RaceScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle'
};

exports.Prisma.LigneeScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.PersonnageScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  dateNaissance: 'dateNaissance',
  statutVie: 'statutVie',
  dateDeces: 'dateDeces',
  causeDeces: 'causeDeces',
  raceId: 'raceId',
  ligneeId: 'ligneeId'
};

exports.Prisma.PersonnageRoleScalarFieldEnum = {
  personnageId: 'personnageId',
  roleId: 'roleId'
};

exports.Prisma.CompetenceScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  exigenceFormation: 'exigenceFormation',
  exigenceRaceId: 'exigenceRaceId'
};

exports.Prisma.PersonnageCompetenceScalarFieldEnum = {
  personnageId: 'personnageId',
  competenceId: 'competenceId',
  niveau: 'niveau'
};

exports.Prisma.DomaineScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  frontieres: 'frontieres',
  richessesOr: 'richessesOr',
  ressources: 'ressources'
};

exports.Prisma.TitreScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle'
};

exports.Prisma.PersonnageTitreScalarFieldEnum = {
  id: 'id',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  estActif: 'estActif',
  personnageId: 'personnageId',
  titreId: 'titreId',
  domaineId: 'domaineId',
  ligneeId: 'ligneeId'
};

exports.Prisma.VillageScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  localisation: 'localisation',
  population: 'population',
  ressourcePrincipale: 'ressourcePrincipale',
  domaineId: 'domaineId'
};

exports.Prisma.GuildeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  specialite: 'specialite',
  reputation: 'reputation'
};

exports.Prisma.GuildeMembreScalarFieldEnum = {
  personnageId: 'personnageId',
  guildeId: 'guildeId',
  dateEntree: 'dateEntree',
  dateSortie: 'dateSortie'
};

exports.Prisma.CreatureScalarFieldEnum = {
  id: 'id',
  espece: 'espece',
  forces: 'forces',
  faiblesses: 'faiblesses',
  dangerosite: 'dangerosite'
};

exports.Prisma.EcoleMagieScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.SortScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  element: 'element',
  coutMana: 'coutMana',
  niveauRequis: 'niveauRequis',
  estInterdit: 'estInterdit',
  estRituel: 'estRituel',
  ecoleId: 'ecoleId'
};

exports.Prisma.MaladieScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  effets: 'effets',
  contagion: 'contagion',
  remede: 'remede',
  tauxMortalite: 'tauxMortalite'
};

exports.Prisma.PersonnageMaladieScalarFieldEnum = {
  personnageId: 'personnageId',
  maladieId: 'maladieId',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  issue: 'issue'
};

exports.Prisma.ArmeeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  effectif: 'effectif',
  composition: 'composition',
  moral: 'moral',
  etatApprovisionnement: 'etatApprovisionnement',
  domaineId: 'domaineId',
  commandantId: 'commandantId'
};

exports.Prisma.BatailleScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  dateBataille: 'dateBataille',
  lieu: 'lieu',
  pertesA: 'pertesA',
  pertesB: 'pertesB',
  vainqueurTexte: 'vainqueurTexte'
};

exports.Prisma.ArmeeBatailleScalarFieldEnum = {
  armeeId: 'armeeId',
  batailleId: 'batailleId',
  cote: 'cote',
  pertes: 'pertes'
};

exports.Prisma.GuildeBatailleScalarFieldEnum = {
  guildeId: 'guildeId',
  batailleId: 'batailleId',
  role: 'role'
};

exports.Prisma.CreatureBatailleScalarFieldEnum = {
  creatureId: 'creatureId',
  batailleId: 'batailleId',
  nombre: 'nombre',
  role: 'role'
};

exports.Prisma.EquipementScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  typeEquipement: 'typeEquipement',
  materiaux: 'materiaux',
  rarete: 'rarete',
  enchantements: 'enchantements',
  affiniteRequise: 'affiniteRequise'
};

exports.Prisma.PersonnageEquipementScalarFieldEnum = {
  personnageId: 'personnageId',
  equipementId: 'equipementId',
  dateAcquisition: 'dateAcquisition',
  source: 'source'
};

exports.Prisma.MarchandScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.RouteCommercialeScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  securite: 'securite',
  saison: 'saison'
};

exports.Prisma.LieuScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  typeLieu: 'typeLieu',
  localisation: 'localisation'
};

exports.Prisma.RouteSegmentScalarFieldEnum = {
  routeId: 'routeId',
  lieuId: 'lieuId',
  ordre: 'ordre'
};

exports.Prisma.MarchandRouteScalarFieldEnum = {
  marchandId: 'marchandId',
  routeId: 'routeId',
  biens: 'biens',
  taxes: 'taxes'
};

exports.Prisma.BardeScalarFieldEnum = {
  id: 'id',
  nom: 'nom'
};

exports.Prisma.HistoireScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  typeEvenement: 'typeEvenement',
  description: 'description',
  dateEvenement: 'dateEvenement',
  bardeId: 'bardeId'
};

exports.Prisma.InventaireScalarFieldEnum = {
  id: 'id',
  typeRessource: 'typeRessource',
  stock: 'stock',
  seuilAlerte: 'seuilAlerte',
  dateMesure: 'dateMesure',
  lieuId: 'lieuId',
  armeeId: 'armeeId',
  villageId: 'villageId'
};

exports.Prisma.RelationDiplomatiqueScalarFieldEnum = {
  id: 'id',
  typeRelation: 'typeRelation',
  conditions: 'conditions',
  dateSignature: 'dateSignature',
  echeance: 'echeance',
  domaineSourceId: 'domaineSourceId',
  domaineCibleId: 'domaineCibleId'
};

exports.Prisma.LoiScalarFieldEnum = {
  id: 'id',
  libelle: 'libelle',
  effet: 'effet'
};

exports.Prisma.LoiTerritoireScalarFieldEnum = {
  loiId: 'loiId',
  domaineId: 'domaineId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Race: 'Race',
  Role: 'Role',
  Lignee: 'Lignee',
  Personnage: 'Personnage',
  PersonnageRole: 'PersonnageRole',
  Competence: 'Competence',
  PersonnageCompetence: 'PersonnageCompetence',
  Domaine: 'Domaine',
  Titre: 'Titre',
  PersonnageTitre: 'PersonnageTitre',
  Village: 'Village',
  Guilde: 'Guilde',
  GuildeMembre: 'GuildeMembre',
  Creature: 'Creature',
  EcoleMagie: 'EcoleMagie',
  Sort: 'Sort',
  Maladie: 'Maladie',
  PersonnageMaladie: 'PersonnageMaladie',
  Armee: 'Armee',
  Bataille: 'Bataille',
  ArmeeBataille: 'ArmeeBataille',
  GuildeBataille: 'GuildeBataille',
  CreatureBataille: 'CreatureBataille',
  Equipement: 'Equipement',
  PersonnageEquipement: 'PersonnageEquipement',
  Marchand: 'Marchand',
  RouteCommerciale: 'RouteCommerciale',
  Lieu: 'Lieu',
  RouteSegment: 'RouteSegment',
  MarchandRoute: 'MarchandRoute',
  Barde: 'Barde',
  Histoire: 'Histoire',
  Inventaire: 'Inventaire',
  RelationDiplomatique: 'RelationDiplomatique',
  Loi: 'Loi',
  LoiTerritoire: 'LoiTerritoire'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
